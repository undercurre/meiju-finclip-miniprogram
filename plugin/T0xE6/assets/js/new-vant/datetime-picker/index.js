import{VantComponent}from"../common/component";import{isDef}from"../common/validator";import{pickerProps}from"../picker/shared";const currentYear=new Date().getFullYear();function isValidDate(date){return isDef(date)&&!isNaN(new Date(date).getTime())}function range(num,min,max){return Math.min(Math.max(num,min),max)}function padZero(val){return`00${val}`.slice(-2)}function times(n,iteratee){let index=-1;const result=Array(n<0?0:n);for(;++index<n;)result[index]=iteratee(index);return result}function getTrueValue(formattedValue){for(formattedValue===void 0&&(formattedValue="1");isNaN(parseInt(formattedValue,10));)formattedValue=formattedValue.slice(1);return parseInt(formattedValue,10)}function getMonthEndDay(year,month){return 32-new Date(year,month-1,32).getDate()}const defaultFormatter=(type,value)=>value;VantComponent({classes:["active-class","toolbar-class","column-class"],props:Object.assign(Object.assign({},pickerProps),{value:{type:null,observer:"updateValue"},filter:null,type:{type:String,value:"datetime",observer:"updateValue"},showToolbar:{type:Boolean,value:!0},formatter:{type:null,value:defaultFormatter},minDate:{type:Number,value:new Date(currentYear-10,0,1).getTime(),observer:"updateValue"},maxDate:{type:Number,value:new Date(currentYear+10,11,31).getTime(),observer:"updateValue"},minHour:{type:Number,value:0,observer:"updateValue"},maxHour:{type:Number,value:23,observer:"updateValue"},minMinute:{type:Number,value:0,observer:"updateValue"},maxMinute:{type:Number,value:59,observer:"updateValue"}}),data:{innerValue:Date.now(),columns:[]},methods:{updateValue(){const{data}=this,val=this.correctValue(data.value),isEqual=val===data.innerValue;this.updateColumnValue(val).then(()=>{isEqual||this.$emit("input",val)})},getPicker(){if(this.picker==null){this.picker=this.selectComponent(".van-datetime-picker");const{picker}=this,{setColumnValues}=picker;picker.setColumnValues=(...args)=>setColumnValues.apply(picker,[...args,!1])}return this.picker},updateColumns(){const{formatter=defaultFormatter}=this.data,results=this.getOriginColumns().map(column=>({values:column.values.map(value=>formatter(column.type,value))}));return this.set({columns:results})},getOriginColumns(){const{filter}=this.data;return this.getRanges().map(({type,range:range2})=>{let values=times(range2[1]-range2[0]+1,index=>{const value=range2[0]+index;return type==="year"?`${value}`:padZero(value)});return filter&&(values=filter(type,values)),{type,values}})},getRanges(){const{data}=this;if(data.type==="time")return[{type:"hour",range:[data.minHour,data.maxHour]},{type:"minute",range:[data.minMinute,data.maxMinute]}];const{maxYear,maxDate,maxMonth,maxHour,maxMinute}=this.getBoundary("max",data.innerValue),{minYear,minDate,minMonth,minHour,minMinute}=this.getBoundary("min",data.innerValue),result=[{type:"year",range:[minYear,maxYear]},{type:"month",range:[minMonth,maxMonth]},{type:"day",range:[minDate,maxDate]},{type:"hour",range:[minHour,maxHour]},{type:"minute",range:[minMinute,maxMinute]}];return data.type==="date"&&result.splice(3,2),data.type==="year-month"&&result.splice(2,3),result},correctValue(value){const{data}=this,isDateType=data.type!=="time";if(isDateType&&!isValidDate(value))value=data.minDate;else if(!isDateType&&!value){const{minHour}=data;value=`${padZero(minHour)}:00`}if(!isDateType){let[hour,minute]=value.split(":");return hour=padZero(range(hour,data.minHour,data.maxHour)),minute=padZero(range(minute,data.minMinute,data.maxMinute)),`${hour}:${minute}`}return value=Math.max(value,data.minDate),value=Math.min(value,data.maxDate),value},getBoundary(type,innerValue){const value=new Date(innerValue),boundary=new Date(this.data[`${type}Date`]),year=boundary.getFullYear();let month=1,date=1,hour=0,minute=0;return type==="max"&&(month=12,date=getMonthEndDay(value.getFullYear(),value.getMonth()+1),hour=23,minute=59),value.getFullYear()===year&&(month=boundary.getMonth()+1,value.getMonth()+1===month&&(date=boundary.getDate(),value.getDate()===date&&(hour=boundary.getHours(),value.getHours()===hour&&(minute=boundary.getMinutes())))),{[`${type}Year`]:year,[`${type}Month`]:month,[`${type}Date`]:date,[`${type}Hour`]:hour,[`${type}Minute`]:minute}},onCancel(){this.$emit("cancel")},onConfirm(){this.$emit("confirm",this.data.innerValue)},onChange(){const{data}=this;let value;const picker=this.getPicker(),originColumns=this.getOriginColumns();if(data.type==="time"){const indexes=picker.getIndexes();value=`${+originColumns[0].values[indexes[0]]}:${+originColumns[1].values[indexes[1]]}`}else{const values=picker.getIndexes().map((value2,index)=>originColumns[index].values[value2]),year=getTrueValue(values[0]),month=getTrueValue(values[1]),maxDate=getMonthEndDay(year,month);let date=getTrueValue(values[2]);data.type==="year-month"&&(date=1),date=date>maxDate?maxDate:date;let hour=0,minute=0;data.type==="datetime"&&(hour=getTrueValue(values[3]),minute=getTrueValue(values[4])),value=new Date(year,month-1,date,hour,minute)}value=this.correctValue(value),this.updateColumnValue(value).then(()=>{this.$emit("input",value),this.$emit("change",picker)})},updateColumnValue(value){let values=[];const{type}=this.data,formatter=this.data.formatter||defaultFormatter,picker=this.getPicker();if(type==="time"){const pair=value.split(":");values=[formatter("hour",pair[0]),formatter("minute",pair[1])]}else{const date=new Date(value);values=[formatter("year",`${date.getFullYear()}`),formatter("month",padZero(date.getMonth()+1))],type==="date"&&values.push(formatter("day",padZero(date.getDate()))),type==="datetime"&&values.push(formatter("day",padZero(date.getDate())),formatter("hour",padZero(date.getHours())),formatter("minute",padZero(date.getMinutes())))}return this.set({innerValue:value}).then(()=>this.updateColumns()).then(()=>picker.setValues(values))}},created(){const innerValue=this.correctValue(this.data.value);this.updateColumnValue(innerValue).then(()=>{this.$emit("input",innerValue)})}});
