import{VantComponent}from"../common/component";import{touch}from"../mixins/touch";import{getAllRect,getRect,groupSetData,nextTick,requestAnimationFrame}from"../common/utils";import{isDef}from"../common/validator";import{useChildren}from"../common/relation";VantComponent({mixins:[touch],classes:["nav-class","tab-class","tab-active-class","line-class"],relation:useChildren("tab",function(){this.updateTabs()}),props:{sticky:Boolean,border:Boolean,swipeable:Boolean,titleActiveColor:String,titleInactiveColor:String,color:String,animated:{type:Boolean,observer(){this.children.forEach((child,index)=>child.updateRender(index===this.data.currentIndex,this))}},lineWidth:{type:null,value:40,observer:"resize"},lineHeight:{type:null,value:-1},active:{type:null,value:0,observer(name){name!==this.getCurrentName()&&this.setCurrentIndexByName(name)}},type:{type:String,value:"line"},ellipsis:{type:Boolean,value:!0},duration:{type:Number,value:.3},zIndex:{type:Number,value:1},swipeThreshold:{type:Number,value:5,observer(value){this.setData({scrollable:this.children.length>value||!this.data.ellipsis})}},offsetTop:{type:Number,value:0},lazyRender:{type:Boolean,value:!0}},data:{tabs:[],scrollLeft:0,scrollable:!1,currentIndex:0,container:null,skipTransition:!0,scrollWithAnimation:!1,lineOffsetLeft:0},mounted(){requestAnimationFrame(()=>{this.swiping=!0,this.setData({container:()=>this.createSelectorQuery().select(".van-tabs")}),this.resize(),this.scrollIntoView()})},methods:{updateTabs(){const{children=[],data}=this;this.setData({tabs:children.map(child=>child.data),scrollable:this.children.length>data.swipeThreshold||!data.ellipsis}),this.setCurrentIndexByName(data.active||this.getCurrentName())},trigger(eventName,child){const{currentIndex}=this.data,currentChild=child||this.children[currentIndex];!isDef(currentChild)||this.$emit(eventName,{index:currentChild.index,name:currentChild.getComputedName(),title:currentChild.data.title})},onTap(event){const{index}=event.currentTarget.dataset,child=this.children[index];child.data.disabled?this.trigger("disabled",child):(this.setCurrentIndex(index),nextTick(()=>{this.trigger("click")}))},setCurrentIndexByName(name){const{children=[]}=this,matched=children.filter(child=>child.getComputedName()===name);matched.length&&this.setCurrentIndex(matched[0].index)},setCurrentIndex(currentIndex){const{data,children=[]}=this;if(!isDef(currentIndex)||currentIndex>=children.length||currentIndex<0||(groupSetData(this,()=>{children.forEach((item,index)=>{const active=index===currentIndex;(active!==item.data.active||!item.inited)&&item.updateRender(active,this)})}),currentIndex===data.currentIndex))return;const shouldEmitChange=data.currentIndex!==null;this.setData({currentIndex}),requestAnimationFrame(()=>{this.resize(),this.scrollIntoView()}),nextTick(()=>{this.trigger("input"),shouldEmitChange&&this.trigger("change")})},getCurrentName(){const activeTab=this.children[this.data.currentIndex];if(activeTab)return activeTab.getComputedName()},resize(){if(this.data.type!=="line")return;const{currentIndex,ellipsis,skipTransition}=this.data;Promise.all([getAllRect(this,".van-tab"),getRect(this,".van-tabs__line")]).then(([rects=[],lineRect])=>{const rect=rects[currentIndex];if(rect==null)return;let lineOffsetLeft=rects.slice(0,currentIndex).reduce((prev,curr)=>prev+curr.width,0);lineOffsetLeft+=(rect.width-lineRect.width)/2+(ellipsis?0:8),this.setData({lineOffsetLeft}),this.swiping=!0,skipTransition&&nextTick(()=>{this.setData({skipTransition:!1})})})},scrollIntoView(){const{currentIndex,scrollable,scrollWithAnimation}=this.data;!scrollable||Promise.all([getAllRect(this,".van-tab"),getRect(this,".van-tabs__nav")]).then(([tabRects,navRect])=>{const tabRect=tabRects[currentIndex],offsetLeft=tabRects.slice(0,currentIndex).reduce((prev,curr)=>prev+curr.width,0);this.setData({scrollLeft:offsetLeft-(navRect.width-tabRect.width)/2}),scrollWithAnimation||nextTick(()=>{this.setData({scrollWithAnimation:!0})})})},onTouchScroll(event){this.$emit("scroll",event.detail)},onTouchStart(event){!this.data.swipeable||this.touchStart(event)},onTouchMove(event){!this.data.swipeable||!this.swiping||this.touchMove(event)},onTouchEnd(){if(!this.data.swipeable||!this.swiping)return;const{direction,deltaX,offsetX}=this;if(direction==="horizontal"&&offsetX>=50){const index=this.getAvaiableTab(deltaX);index!==-1&&this.setCurrentIndex(index)}this.swiping=!1},getAvaiableTab(direction){const{tabs,currentIndex}=this.data,step=direction>0?-1:1;for(let i=step;currentIndex+i<tabs.length&&currentIndex+i>=0;i+=step){const index=currentIndex+i;if(index>=0&&index<tabs.length&&tabs[index]&&!tabs[index].disabled)return index}return-1}}});
